'use strict';

// Built using the 'marked' library for interpretation

// Seanr707 2016/07/21 10:00am

const Input = React.createClass({
  
  getInitialState: function () {
    // Sample to be inserted to textarea on load
    const sample = [
      '# Heading \n\n ### Smaller heading \n\n',
      'One line space to begin new ~~paragraf~~ paragraph\n\n',
      '**Be bold**, not *slanted*\n\n',
      '`Monospace is always good face`\n\n',
      '    Four spaces each\n    line to have some\n    // code'
    ];
    return {value: sample.join('')};
  },
  
  // Updates virtualDOM when real DOM is altered
  handleChange: function (event) {
    this.setState({value: event.target.value});
  },
  
  // Clears textarea and virtualDOM
  handleClear: function () {
    console.log('Clearing...');
    this.setState({value: ''});
    
    // Clears Upload input as well
    // Will console error if Browser (IE8/9) doesn't support value change
    try {
      document.getElementById('upload').value = '';
    } catch (err) {
      console.log(err + '\nTry site on a newer browser');
    }
  },
  
  // Reads textfile or .md from local PC and copies to textarea
  handleFile: function (event) {
    const file = event.target.files;
    const reader = new FileReader;
    
    console.log(file);
    console.log(file[0]);
    
    let self = this;
    
    // Async function which loads text into textarea once textFromFile is started
    reader.onload = (function(theFile) {
      return function(e) {
        console.log('Loaded txt!');
        self.setState({value: e.target.result});
      };
    })(file);
    
    reader.readAsText(file[0]);
  },
  
  // Delegates button click to 'file-input' field (which is hidden due to being... ugly)
  handleUpload: function (event) {
    const upload = function () {
      // find input
      let input = document.getElementById('upload');

      // create fake click on DOM
      if (document.createEvent) {
          var event = document.createEvent('MouseEvents');
          event.initEvent('click', true, true);
          input.dispatchEvent(event);
      }
      else {
          input.click();
      }
    }
    
    upload();
  },
  
  render: function () {
    const width = 'col-md-4 col-sm-4';
    const sideWidth = 'col-md-2 small-hide';
    const buttonWidth = 'col-md-1 col-sm-2 col-xs-3';
    
    return (
      <div className="container">
        {/* Main container */}
        <div className="row">
          <span className={sideWidth} />
          <div id="input-text" className={width}>
            <textarea
              id="text-input"
              type="text" 
              className="form-control"
              onChange={this.handleChange}
              value={this.state.value}
            />
          </div>
          {/* Call to Output child */}
          <Output colWidth={width} textData={this.state.value} />
          <span className={sideWidth} />
        </div>
        {/* Navbar at bottom for Buttons */}
        <nav className="navbar navbar-default navbar-fixed-bottom nav-bottom">
          <div className="container-fluid">
            <div className="bottom-buttons-container">
              <div className="button-container">
                <button className="btn btn-danger" onClick={this.handleClear}>Clear</button>
              </div>
              <div className="button-container">
                {/* Call to Export child */}
                <SaveFile textData={this.state.value} />
              </div>
              <div className="button-container">
                <button className="btn btn-default" onClick={this.handleUpload}>Upload</button>
                <input
                  id="upload"
                  type="file"
                  accept=".txt, .md"
                  enctype="text/plain"
                  onChange={this.handleFile}
                  className="upload"
                />
              </div>
            </div>
          </div>
        </nav>
      </div>
        
    );
  }
});

const Output = React.createClass({
  render: function () {
    
    // Wrapped in function to attempt to make injection of HTML safer
    const markdown = function(text) {
      return {__html: marked(text, {sanitize: true})};
    }

    return (
      <div id="interpretted-text" className={this.props.colWidth}>
        <p
          className="responsiveWidth"
          dangerouslySetInnerHTML={markdown(this.props.textData)} 
        />
      </div>
    );
  }
});

const SaveFile = React.createClass({
  
  handleClick: function (event) {
    
    // Returns null if no text in field
    if (!this.props.textData) {
      return undefined;
    }
    
    const download = function (filename, text) {
      var pom = document.createElement('a');
      pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
      pom.setAttribute('download', filename);

      if (document.createEvent) {
          var event = document.createEvent('MouseEvents');
          event.initEvent('click', true, true);
          pom.dispatchEvent(event);
      }
      else {
          pom.click();
      }
    }
    
    download('markdown-preview.md', this.props.textData)
  },
  
  render: function () {
    return (
      <button onClick={this.handleClick} className="btn btn-primary">Export</button>
    );
  }
});

ReactDOM.render(<Input />, document.getElementById('editor'));
